[
    {
        "id": "b1af79a7f0e8c087",
        "type": "tab",
        "label": "ELECTRICAL ENERGY INDICATORS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec66c396c4b33841",
        "type": "tab",
        "label": "GAS ENERGY INDICATORS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "754c6418534b1498",
        "type": "tab",
        "label": "ALL MACHINES",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2271f53131b9c1c3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0058cc",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#e8ebf8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0058cc",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0058cc",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1a7cff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0058cc",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Zamel Configuration Site",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 15,
                "gy": 15,
                "cx": 5,
                "cy": 0,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "33cbb12c1a66e85c",
        "type": "mqtt-broker",
        "name": "node_red_broker",
        "broker": "10.0.4.207",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "41412466491ec58e",
        "type": "mongodb4-client",
        "name": "mongoDB",
        "protocol": "mongodb",
        "hostname": "",
        "port": "",
        "dbName": "Zamel_Modules",
        "authSource": "",
        "authMechanism": "SCRAM-SHA-256",
        "tls": false,
        "tlsCAFile": "",
        "tlsInsecure": false,
        "uri": "mongodb+srv://sciteex:sciteex@sciteex.oatlz.mongodb.net/?retryWrites=true&w=majority",
        "advanced": "{\"connectTimeoutMS\": 30000}",
        "uriTabActive": "tab-uri-advanced"
    },
    {
        "id": "b8163756c093925f",
        "type": "ui_tab",
        "name": "Gas Indicators",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3a34bad769da0b87",
        "type": "ui_group",
        "name": "Charts",
        "tab": "b8163756c093925f",
        "order": 1,
        "disp": false,
        "width": "27",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bfeae35256b2c045",
        "type": "ui_spacer",
        "z": "ec66c396c4b33841",
        "name": "spacer",
        "group": "3a34bad769da0b87",
        "order": 11,
        "width": "27",
        "height": "1"
    },
    {
        "id": "e382d49385d387ce",
        "type": "ui_spacer",
        "z": "ec66c396c4b33841",
        "name": "spacer",
        "group": "3a34bad769da0b87",
        "order": 7,
        "width": "27",
        "height": "1"
    },
    {
        "id": "bc244f077d4007a5",
        "type": "ui_tab",
        "name": "Details Indicators",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d58113581ca84c3e",
        "type": "ui_group",
        "name": "Charts",
        "tab": "bc244f077d4007a5",
        "order": 3,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dbfe19ab467aa0f2",
        "type": "ui_spacer",
        "z": "ec66c396c4b33841",
        "name": "spacer",
        "group": "3a34bad769da0b87",
        "order": 4,
        "width": "3",
        "height": "1"
    },
    {
        "id": "4db5369c711fe780",
        "type": "ui_spacer",
        "z": "ec66c396c4b33841",
        "name": "spacer",
        "group": "3a34bad769da0b87",
        "order": 6,
        "width": "3",
        "height": "1"
    },
    {
        "id": "546202681ae6d402",
        "type": "ui_spacer",
        "z": "ec66c396c4b33841",
        "name": "spacer",
        "group": "3a34bad769da0b87",
        "order": 2,
        "width": "3",
        "height": "1"
    },
    {
        "id": "87c473cdcc876a78",
        "type": "ui_group",
        "name": "Settings",
        "tab": "bc244f077d4007a5",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "077209b7cf48674c",
        "type": "ui_spacer",
        "z": "b1af79a7f0e8c087",
        "name": "spacer",
        "group": "87c473cdcc876a78",
        "order": 4,
        "width": "30",
        "height": "1"
    },
    {
        "id": "af8ae48bf5d131e7",
        "type": "ui_spacer",
        "z": "b1af79a7f0e8c087",
        "name": "spacer",
        "group": "87c473cdcc876a78",
        "order": 7,
        "width": "1",
        "height": "1"
    },
    {
        "id": "2355d9c034ddff9c",
        "type": "ui_group",
        "name": "Results",
        "tab": "bc244f077d4007a5",
        "order": 2,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bd1200e48726b689",
        "type": "ui_spacer",
        "z": "b1af79a7f0e8c087",
        "name": "spacer",
        "group": "87c473cdcc876a78",
        "order": 9,
        "width": "30",
        "height": "1"
    },
    {
        "id": "a1cc90d2ae00cefe",
        "type": "ui_tab",
        "name": "Indicators",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a814efe498a94086",
        "type": "ui_group",
        "name": "Settings",
        "tab": "a1cc90d2ae00cefe",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4019840fb4425a21",
        "type": "ui_group",
        "name": "Tokarka CNC Colchester K2 (238_STX)",
        "tab": "a1cc90d2ae00cefe",
        "order": 2,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "36a069683a8938df",
        "type": "ui_group",
        "name": "Tokarka CNC WNC500S/1 ALPINA",
        "tab": "a1cc90d2ae00cefe",
        "order": 3,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dcaeca70c88b5fe1",
        "type": "ui_group",
        "name": "Centrum frezerskie MAZAK VCN-530C",
        "tab": "a1cc90d2ae00cefe",
        "order": 4,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "994bcd932d808957",
        "type": "ui_group",
        "name": "Centrum tokarskie MAZAK QuickTurn 350MB",
        "tab": "a1cc90d2ae00cefe",
        "order": 5,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "79c0e754f5264b6e",
        "type": "ui_group",
        "name": "Prasa krawędziowa TruBend 7036",
        "tab": "a1cc90d2ae00cefe",
        "order": 6,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "02e36f0bf85e2720",
        "type": "ui_group",
        "name": "Prasa krawędziowa Trubend 5230",
        "tab": "a1cc90d2ae00cefe",
        "order": 7,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b100aa642e832464",
        "type": "ui_group",
        "name": "Wykrawarka TruPunch 3000",
        "tab": "a1cc90d2ae00cefe",
        "order": 8,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "69f1c5c452326bcd",
        "type": "ui_group",
        "name": "Wycinarka laserowa TruLaser 3030 L81",
        "tab": "a1cc90d2ae00cefe",
        "order": 9,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dcbb06bbba0a65d4",
        "type": "ui_chart",
        "z": "b1af79a7f0e8c087",
        "name": "electrical energy consumption",
        "group": "d58113581ca84c3e",
        "order": 1,
        "width": "15",
        "height": "10",
        "label": "ELECTRICAL ENERGY USED",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae3d",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1350,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "a5f2591e3fda7b15",
        "type": "ui_button",
        "z": "b1af79a7f0e8c087",
        "name": "send date",
        "group": "87c473cdcc876a78",
        "order": 8,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "CONFIRM",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 620,
        "wires": [
            [
                "820b7d890c7519d7",
                "db2929fde5cd7f26"
            ]
        ]
    },
    {
        "id": "717475274a2227b5",
        "type": "ui_dropdown",
        "z": "b1af79a7f0e8c087",
        "name": "select machine",
        "label": "",
        "tooltip": "",
        "place": "Select machine",
        "group": "87c473cdcc876a78",
        "order": 1,
        "width": "10",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Tokarka CNC Colchester K2 (238_STX)",
                "value": "Machine_ID1",
                "type": "str"
            },
            {
                "label": "Tokarka CNC WNC500S/1 ALPINA",
                "value": "Machine_ID2",
                "type": "str"
            },
            {
                "label": "Centrum frezerskie MAZAK VCN-530C",
                "value": "Machine_ID3",
                "type": "str"
            },
            {
                "label": "Centrum tokarskie MAZAK QuickTurn 350MB",
                "value": "Machine_ID4",
                "type": "str"
            },
            {
                "label": "Prasa krawędziowa TruBend 7036",
                "value": "Machine_ID5",
                "type": "str"
            },
            {
                "label": "Prasa krawędziowa Trubend 5230",
                "value": "Machine_ID6",
                "type": "str"
            },
            {
                "label": "Wykrawarka TruPunch 3000",
                "value": "Machine_ID7",
                "type": "str"
            },
            {
                "label": "Wycinarka laserowa TruLaser 3030 L81",
                "value": "Machine_ID8",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "4982185d4ca6b28d"
            ]
        ]
    },
    {
        "id": "e25e2c2bfa9288d6",
        "type": "ui_numeric",
        "z": "b1af79a7f0e8c087",
        "name": "energy price",
        "label": "Electrical Energy Price [for 1 kWh]",
        "tooltip": "",
        "group": "87c473cdcc876a78",
        "order": 3,
        "width": "10",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} zł",
        "min": 0,
        "max": 10,
        "step": "0.01",
        "className": "",
        "x": 650,
        "y": 220,
        "wires": [
            [
                "520c6d8a1cbc00c8"
            ]
        ]
    },
    {
        "id": "c04b1afb0b4ab13b",
        "type": "ui_date_picker",
        "z": "b1af79a7f0e8c087",
        "name": "date from",
        "label": "From",
        "group": "87c473cdcc876a78",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "68c14c76daefd87a",
                "dafe805f9cee7f49"
            ]
        ]
    },
    {
        "id": "845279e376e84ed5",
        "type": "ui_date_picker",
        "z": "b1af79a7f0e8c087",
        "name": "date to",
        "label": "To",
        "group": "87c473cdcc876a78",
        "order": 6,
        "width": "7",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "3e9fa34b756efd22",
                "af65e44738cf4741"
            ]
        ]
    },
    {
        "id": "259094efe24bf372",
        "type": "ui_dropdown",
        "z": "b1af79a7f0e8c087",
        "name": "select_shifts",
        "label": "",
        "tooltip": "",
        "place": "Select shifts",
        "group": "87c473cdcc876a78",
        "order": 2,
        "width": "10",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "1 Shift",
                "value": "shift_1",
                "type": "str"
            },
            {
                "label": "2 Shift",
                "value": "shift_2",
                "type": "str"
            },
            {
                "label": "1+2 Shift",
                "value": "shift_1_2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "230a1330a87be3c2"
            ]
        ]
    },
    {
        "id": "cea60df25d9caafe",
        "type": "ui_text",
        "z": "b1af79a7f0e8c087",
        "group": "2355d9c034ddff9c",
        "order": 11,
        "width": "7",
        "height": "1",
        "name": "show total electrical energy used",
        "label": "Total Electrical Energy Used",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1530,
        "y": 660,
        "wires": []
    },
    {
        "id": "4982185d4ca6b28d",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "chart - select machine",
        "func": "flow.set('chart_select_machine', msg.payload);\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": []
    },
    {
        "id": "a4204ceb107ff591",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "chart - select date from/electrical energy",
        "func": "flow.set('chart_date_from', msg.payload);\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 280,
        "wires": []
    },
    {
        "id": "568970e501edf9c1",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "chart - select date to/electrical energy",
        "func": "flow.set('chart_date_to', msg.payload);\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": []
    },
    {
        "id": "820b7d890c7519d7",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "aggregate data for electrical energy",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                        {\n                        $match: {\n                            electrical_energy_date: {\n                                    $gte: date_from,\n                                    $lte: date_to\n                            }\n                        }\n                        },\n                        {\n                        $sort:  {\n                            electrical_energy_date: 1,\n                        }\n                        }\n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 620,
        "wires": [
            [
                "0b3feeaa7153151b"
            ]
        ]
    },
    {
        "id": "520c6d8a1cbc00c8",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "energy price",
        "func": "flow.set('electrical_energy_price', msg.payload);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 220,
        "wires": [
            [
                "115b6902c72c6f86"
            ]
        ]
    },
    {
        "id": "809a2b41a280cd0a",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "",
        "func": "//var msgTotal = {};\n//var msgAverage = {};\n\nlet total = flow.get('total_electrical') || 0;\n//let array_length = flow.get('array_length_energy') || 0;\nlet price = flow.get('electrical_energy_price') || 0;\n\nlet total_price = 0;\n//let average_price = 0;\n//let average_total = 0;\n    \n    //average_total = total / array_length;\n    total_price = total * price;\n    //average_price = average_total * price;\n    \n    //average_total = parseFloat(average_total).toFixed(1);\n    total_price = parseFloat(total_price).toFixed(1);\n    //average_price = parseFloat(average_price).toFixed(1);\n    \n    msg.payload = String(total) + \" kWh\" + \" / \" + String(total_price) + \" zł\";\n    //msgAverage.payload = String(average_total) + \" kWh\" + \" / \" + String(average_price) + \" zł\";\n    \n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 660,
        "wires": [
            [
                "cea60df25d9caafe"
            ]
        ]
    },
    {
        "id": "230a1330a87be3c2",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "chart - select_shifts",
        "func": "flow.set('chart_select_shifts', msg.payload);\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": []
    },
    {
        "id": "092b7422d87c0e36",
        "type": "ui_chart",
        "z": "b1af79a7f0e8c087",
        "name": "productivity",
        "group": "d58113581ca84c3e",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1210,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "58dab8a37d6bb6f1",
        "type": "ui_text",
        "z": "b1af79a7f0e8c087",
        "group": "2355d9c034ddff9c",
        "order": 12,
        "width": "7",
        "height": "1",
        "name": "show total work time",
        "label": "Total Work Time",
        "format": "{{msg.payload}} ",
        "layout": "col-center",
        "className": "",
        "x": 1420,
        "y": 760,
        "wires": []
    },
    {
        "id": "db2929fde5cd7f26",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "aggregate data for work time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            enabled_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            enabled_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            enabled_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 720,
        "wires": [
            [
                "296151fa5c618910"
            ]
        ]
    },
    {
        "id": "ac31067ad8bba745",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "",
        "func": "//var msgTotal = {};\n//var msgAverage = {};\n\nlet total = flow.get('total_enabled') || 0;\n//let array_length = flow.get('array_length_energy') || 0;\n\n//let average_price = 0;\n//let average_total = 0;\n    \n    //average_total = total / array_length;\n    //average_price = average_total * price;\n    \n    //average_total = parseFloat(average_total).toFixed(1);\n    //average_price = parseFloat(average_price).toFixed(1);\n    var h = Math.floor(total / 3600);\n    var m = Math.floor(total % 3600 / 60);\n    var s = Math.floor(total % 3600 % 60);\n\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\n    var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\n    msg.payload = String(hDisplay) + String(mDisplay) + String(sDisplay);\n    //msgAverage.payload = String(average_total) + \" kWh\" + \" / \" + String(average_price) + \" zł\";\n    \n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 760,
        "wires": [
            [
                "58dab8a37d6bb6f1"
            ]
        ]
    },
    {
        "id": "bbdfe77eb5b7eccd",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 820,
        "wires": [
            [
                "7ad40eef3e494aaf"
            ]
        ]
    },
    {
        "id": "3e9fa34b756efd22",
        "type": "moment",
        "z": "b1af79a7f0e8c087",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "23",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "568970e501edf9c1"
            ]
        ]
    },
    {
        "id": "7e2d030fb47597fc",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "dictionary of dates - electrical energy",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readElectrical_1_shift = [];\nlet readElectrical_2_shift = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\nlet sumElectrical = 0;\nlet sumElectrical_1_shift = 0;///\nlet sumElectrical_2_shift = 0;///\nlet sumElectricalTab = [];\n\nlet dateArray;\n\nvar send_date;\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getElectrical_data(arrayLenght, getStartHour, getStopHour) {\n    const readElectrical = [];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].electrical_energy_date);\n            actualDateToISO[i] = actualDate[i].toISOString().substring(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                        if (msg.payload[i].electrical_energy_date > concat_date_from){\n                            if (msg.payload[i].electrical_energy_date < concat_date_to){\n                                if (msg.payload[i].electrical_energy_used >= \"0.6\") {\n                                    readElectrical[j] = msg.payload[i].electrical_energy_used;\n                                    break;\n                                }else{\n                                    readElectrical[j] = \"0.0\";\n                                    break;\n                                }\n                            }\n                        }\n                }else{\n                    readElectrical[j] = \"0.0\";\n                }\n        }\n    }\n        return readElectrical;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readElectrical_1_shift = getElectrical_data(1, \"T13:00:00.000Z\", \"T15:00:00.000Z\");\n                for (let k = 0; k < readElectrical_1_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_1_shift[k]);\n                    sumElectrical += sumElectricalTab[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [readElectrical_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readElectrical_2_shift = getElectrical_data(1, \"T21:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readElectrical_2_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_2_shift[k]);\n                    sumElectrical += sumElectricalTab[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [readElectrical_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readElectrical_1_shift = getElectrical_data(1, \"T13:00:00.000Z\", \"T15:00:00.000Z\");\n            readElectrical_2_shift = getElectrical_data(1, \"T21:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readElectrical_1_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_1_shift[k]);\n                    sumElectrical_1_shift += sumElectricalTab[k];\n                }\n                for (let k = 0; k < readElectrical_2_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_2_shift[k]);\n                    sumElectrical_2_shift += sumElectricalTab[k];\n                }\n            sumElectrical = sumElectrical_1_shift + sumElectrical_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [readElectrical_1_shift, readElectrical_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readElectrical_1_shift = getElectrical_data(dateArray.length, \"T13:00:00.000Z\", \"T15:00:00.000Z\");\n                for (let k = 0; k < readElectrical_1_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_1_shift[k]);\n                    sumElectrical += sumElectricalTab[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [readElectrical_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readElectrical_2_shift = getElectrical_data(dateArray.length, \"T21:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readElectrical_2_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_2_shift[k]);\n                    sumElectrical += sumElectricalTab[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [readElectrical_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readElectrical_1_shift = getElectrical_data(dateArray.length, \"T13:00:00.000Z\", \"T15:00:00.000Z\");\n            readElectrical_2_shift = getElectrical_data(dateArray.length, \"T21:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readElectrical_1_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_1_shift[k]);\n                    sumElectrical_1_shift += sumElectricalTab[k];\n                }\n                for (let k = 0; k < readElectrical_2_shift.length; k++) {\n                    sumElectricalTab[k] = Number(readElectrical_2_shift[k]);\n                    sumElectrical_2_shift += sumElectricalTab[k];\n                }\n            sumElectrical = sumElectrical_1_shift + sumElectrical_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [readElectrical_1_shift, readElectrical_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\nsumElectrical = parseFloat(sumElectrical).toFixed(1);\nflow.set('total_electrical', sumElectrical);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 620,
        "wires": [
            [
                "dcbb06bbba0a65d4",
                "809a2b41a280cd0a"
            ]
        ]
    },
    {
        "id": "68c14c76daefd87a",
        "type": "moment",
        "z": "b1af79a7f0e8c087",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "7",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 380,
        "y": 280,
        "wires": [
            [
                "a4204ceb107ff591"
            ]
        ]
    },
    {
        "id": "dafe805f9cee7f49",
        "type": "moment",
        "z": "b1af79a7f0e8c087",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "5",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 380,
        "y": 400,
        "wires": [
            [
                "9e1ea239d7723cbd"
            ]
        ]
    },
    {
        "id": "9e1ea239d7723cbd",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "chart - select date from/work time",
        "func": "flow.set('chart_date_work_time_from', msg.payload);\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 400,
        "wires": []
    },
    {
        "id": "e9d94fa688977f8d",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "chart - select date to/work time",
        "func": "flow.set('chart_date_work_time_to', msg.payload);\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": []
    },
    {
        "id": "af65e44738cf4741",
        "type": "moment",
        "z": "b1af79a7f0e8c087",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "23",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 380,
        "y": 460,
        "wires": [
            [
                "e9d94fa688977f8d"
            ]
        ]
    },
    {
        "id": "ee9005efae5ad37e",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\nlet sumEnabled = 0;\nlet sumEnabled_1_shift = 0;\nlet sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\nflow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 720,
        "wires": [
            [
                "092b7422d87c0e36",
                "ac31067ad8bba745",
                "bbdfe77eb5b7eccd"
            ]
        ]
    },
    {
        "id": "94ff1691f34429bb",
        "type": "ui_chart",
        "z": "b1af79a7f0e8c087",
        "name": "efficiency",
        "group": "d58113581ca84c3e",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2020,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "6597571030b716fb",
        "type": "ui_text",
        "z": "b1af79a7f0e8c087",
        "group": "2355d9c034ddff9c",
        "order": 12,
        "width": "7",
        "height": "1",
        "name": "show total job time",
        "label": "Total Job Time",
        "format": "{{msg.payload}} ",
        "layout": "col-center",
        "className": "",
        "x": 2230,
        "y": 860,
        "wires": []
    },
    {
        "id": "663dd30ed75e502a",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "",
        "func": "//var msgTotal = {};\n//var msgAverage = {};\n\nlet total = flow.get('total_job') || 0;\n//let array_length = flow.get('array_length_energy') || 0;\n\n//let average_price = 0;\n//let average_total = 0;\n    \n    //average_total = total / array_length;\n    //average_price = average_total * price;\n    \n    //average_total = parseFloat(average_total).toFixed(1);\n    //average_price = parseFloat(average_price).toFixed(1);\n    var h = Math.floor(total / 3600);\n    var m = Math.floor(total % 3600 / 60);\n    var s = Math.floor(total % 3600 % 60);\n\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\n    var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\n    msg.payload = String(hDisplay) + String(mDisplay) + String(sDisplay);\n    //msgAverage.payload = String(average_total) + \" kWh\" + \" / \" + String(average_price) + \" zł\";\n    \n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 860,
        "wires": [
            [
                "6597571030b716fb"
            ]
        ]
    },
    {
        "id": "0911b8f529d987fe",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\nlet sumJob = 0;\nlet sumJob_1_shift = 0;\nlet sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\nflow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 820,
        "wires": [
            [
                "94ff1691f34429bb",
                "663dd30ed75e502a"
            ]
        ]
    },
    {
        "id": "d2a6243cfdaa9dfc",
        "type": "ui_chart",
        "z": "b1af79a7f0e8c087",
        "name": "number of cycles",
        "group": "d58113581ca84c3e",
        "order": 13,
        "width": "15",
        "height": "10",
        "label": "NUMBER OF CYCLES",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2090,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "ca832f45d0e53d95",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "dictionary of dates - number of cycles",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\nlet sumCycles = 0;\nlet sumCycles_1_shift = 0;\nlet sumCycles_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let cycles = 0;\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                            readEnableTime[j] = readEnableTime[j] + 1;\n                       }\n                }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    sumCycles += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [readEnabledTime_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n            for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    sumCycles += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [readEnabledTime_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    sumCycles_1_shift += readEnabledTime_1_shift[k];\n                }\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n            for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    sumCycles_2_shift += readEnabledTime_2_shift[k];\n                }\n            sumCycles = sumCycles_1_shift + sumCycles_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [readEnabledTime_1_shift, readEnabledTime_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    sumCycles += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [readEnabledTime_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n            for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    sumCycles += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [readEnabledTime_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    sumCycles_1_shift += readEnabledTime_1_shift[k];\n                }\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n            for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    sumCycles_2_shift += readEnabledTime_2_shift[k];\n                }\n            sumCycles = sumCycles_1_shift + sumCycles_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [readEnabledTime_1_shift, readEnabledTime_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\nflow.set('total_cycles', sumCycles);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 920,
        "wires": [
            [
                "d2a6243cfdaa9dfc",
                "930ac0aa9c2047e6"
            ]
        ]
    },
    {
        "id": "930ac0aa9c2047e6",
        "type": "function",
        "z": "b1af79a7f0e8c087",
        "name": "",
        "func": "//var msgTotal = {};\n//var msgAverage = {};\n\nlet total = flow.get('total_cycles') || 0;\n//let array_length = flow.get('array_length_energy') || 0;\n\n//let average_price = 0;\n//let average_total = 0;\n    \n    //average_total = total / array_length;\n    //average_price = average_total * price;\n    \n    //average_total = parseFloat(average_total).toFixed(1);\n    //average_price = parseFloat(average_price).toFixed(1);\n    \n    msg.payload = String(total) + \" cycles\";\n    //msgAverage.payload = String(average_total) + \" kWh\" + \" / \" + String(average_price) + \" zł\";\n    \n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 960,
        "wires": [
            [
                "c9bb28cc9f526bd9"
            ]
        ]
    },
    {
        "id": "c9bb28cc9f526bd9",
        "type": "ui_text",
        "z": "b1af79a7f0e8c087",
        "group": "2355d9c034ddff9c",
        "order": 12,
        "width": "7",
        "height": "1",
        "name": "show number of cycles",
        "label": "Number of Cycles",
        "format": "{{msg.payload}} ",
        "layout": "col-center",
        "className": "",
        "x": 2280,
        "y": 960,
        "wires": []
    },
    {
        "id": "0b3feeaa7153151b",
        "type": "mongodb4",
        "z": "b1af79a7f0e8c087",
        "clientNode": "41412466491ec58e",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "name": "",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "7e2d030fb47597fc"
            ]
        ]
    },
    {
        "id": "296151fa5c618910",
        "type": "mongodb4",
        "z": "b1af79a7f0e8c087",
        "clientNode": "41412466491ec58e",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "name": "",
        "x": 690,
        "y": 720,
        "wires": [
            [
                "ee9005efae5ad37e"
            ]
        ]
    },
    {
        "id": "7ad40eef3e494aaf",
        "type": "mongodb4",
        "z": "b1af79a7f0e8c087",
        "clientNode": "41412466491ec58e",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "name": "",
        "x": 1510,
        "y": 820,
        "wires": [
            [
                "0911b8f529d987fe",
                "ca832f45d0e53d95"
            ]
        ]
    },
    {
        "id": "115b6902c72c6f86",
        "type": "change",
        "z": "b1af79a7f0e8c087",
        "name": "write to context file",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "#:(file)::electrical_energy_price_cx",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d107d0fc3506bc0b",
        "type": "change",
        "z": "b1af79a7f0e8c087",
        "name": "read from context file",
        "rules": [
            {
                "t": "move",
                "p": "#:(file)::electrical_energy_price_cx",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "e25e2c2bfa9288d6"
            ]
        ]
    },
    {
        "id": "0da74b6c018b9c8a",
        "type": "inject",
        "z": "b1af79a7f0e8c087",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "d107d0fc3506bc0b"
            ]
        ]
    },
    {
        "id": "5b1ef7ea58f1510b",
        "type": "ui_date_picker",
        "z": "ec66c396c4b33841",
        "name": "date from",
        "label": "Date From",
        "group": "3a34bad769da0b87",
        "order": 9,
        "width": "9",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "4b1aa3267788f576"
            ]
        ]
    },
    {
        "id": "518ad706efb551e4",
        "type": "ui_date_picker",
        "z": "ec66c396c4b33841",
        "name": "date to",
        "label": "Date To",
        "group": "3a34bad769da0b87",
        "order": 10,
        "width": "9",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "2bad9f11ba09ba46"
            ]
        ]
    },
    {
        "id": "8f2ca312d2a83de8",
        "type": "ui_chart",
        "z": "ec66c396c4b33841",
        "name": "gas used",
        "group": "3a34bad769da0b87",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "GAS USED",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1140,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "17f8d75295f8e93d",
        "type": "ui_button",
        "z": "ec66c396c4b33841",
        "name": "send date",
        "group": "3a34bad769da0b87",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "CONFIRM",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "46ad0e51a5d39bf0"
            ]
        ]
    },
    {
        "id": "a5588182b1d22b47",
        "type": "ui_dropdown",
        "z": "ec66c396c4b33841",
        "name": "select machine",
        "label": "",
        "tooltip": "",
        "place": "Select Machine",
        "group": "3a34bad769da0b87",
        "order": 8,
        "width": "9",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Rubicoat",
                "value": "Machine_ID9",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "81c577bdb91ba376"
            ]
        ]
    },
    {
        "id": "81c577bdb91ba376",
        "type": "function",
        "z": "ec66c396c4b33841",
        "name": "chart - select machine",
        "func": "flow.set('chart_select_machine', msg.payload);\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": []
    },
    {
        "id": "eaedd7e889c65e8e",
        "type": "function",
        "z": "ec66c396c4b33841",
        "name": "chart - select date from",
        "func": "flow.set('chart_date_from', msg.payload);\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 220,
        "wires": []
    },
    {
        "id": "585780eaa637d1d2",
        "type": "function",
        "z": "ec66c396c4b33841",
        "name": "chart - select date to",
        "func": "flow.set('chart_date_to', msg.payload);\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 280,
        "wires": []
    },
    {
        "id": "46ad0e51a5d39bf0",
        "type": "function",
        "z": "ec66c396c4b33841",
        "name": "aggregate function",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n\n    msg.payload = [[\n                        {\n                        $match: {\n                                gas_energy_date: {\n                                        $gte: date_from,\n                                        $lte: date_to\n                                        }\n                                }\n                        },\n                        {\n                        $sort: {\n                                gas_energy_date: 1\n                                }\n                        }\n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "802a8b344ecc9122"
            ]
        ]
    },
    {
        "id": "69a9c06c869175c4",
        "type": "ui_numeric",
        "z": "ec66c396c4b33841",
        "name": "gas price",
        "label": "Gas Price [for 1 m3]",
        "tooltip": "",
        "group": "3a34bad769da0b87",
        "order": 3,
        "width": "9",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} zł",
        "min": 0,
        "max": 10,
        "step": "0.01",
        "className": "",
        "x": 640,
        "y": 160,
        "wires": [
            [
                "61162ba67168fd87"
            ]
        ]
    },
    {
        "id": "0c693204deb3dbfb",
        "type": "ui_text",
        "z": "ec66c396c4b33841",
        "group": "3a34bad769da0b87",
        "order": 5,
        "width": "9",
        "height": "1",
        "name": "shwo total gas used",
        "label": "Total Gas Used",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1360,
        "y": 380,
        "wires": []
    },
    {
        "id": "61162ba67168fd87",
        "type": "function",
        "z": "ec66c396c4b33841",
        "name": "gas price",
        "func": "flow.set('gas_energy_price', msg.payload);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 160,
        "wires": [
            [
                "8a1939f20a2e7331"
            ]
        ]
    },
    {
        "id": "e2e5cfdbb8729cd1",
        "type": "function",
        "z": "ec66c396c4b33841",
        "name": "",
        "func": "//var msgTotal = {};\n//var msgAverage = {};\n\nlet total = flow.get('total_gas') || 0;\n//let array_length = flow.get('array_length_gas') || 0;\nlet price = flow.get('gas_energy_price') || 0;\n\nlet total_price = 0;\n//let average_price = 0;\n//let average_total = 0;\n    \n    //average_total = total / array_length;\n    total_price = total * price;\n    //average_price = average_total * price;\n    \n    //average_total = parseFloat(average_total).toFixed(1);\n    total_price = parseFloat(total_price).toFixed(1);\n    //average_price = parseFloat(average_price).toFixed(1);\n    \n    msg.payload = String(total) + \" m3\" + \" / \" + String(total_price) + \" zł\";\n    //msgAverage.payload = String(average_total) + \" m3\" + \" / \" + String(average_price) + \" zł\";\n    \n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 380,
        "wires": [
            [
                "0c693204deb3dbfb"
            ]
        ]
    },
    {
        "id": "ae133b77072cc05e",
        "type": "function",
        "z": "ec66c396c4b33841",
        "name": "dictionary of dates - gas energy",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readGas = [];\nlet sumGas = 0;\nlet sumGasTab = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\nlet dateArray\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\n\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n        for (let j = 0; j < 1; j++) {\n            for (let i = 0; i < msg.payload.length; i++) {\n                actualDate[i] = new Date(msg.payload[i].gas_energy_date);\n                actualDateToISO[i] = actualDate[i].toISOString().substring(0, 10);\n                    if (dateArray[j] == actualDateToISO[i]) {\n                        readGas[j] = msg.payload[i].gas_energy_used;\n                        break;\n                    }else{\n                        readGas[j] = \"0.0\";\n                    }\n            }\n        }\n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        for (let j = 0; j < dateArray.length; j++) {\n            for (let i = 0; i < msg.payload.length; i++) {\n                    actualDate[i] = new Date(msg.payload[i].gas_energy_date);\n                    actualDateToISO[i] = actualDate[i].toISOString().substring(0, 10);\n                        if (dateArray[j] == actualDateToISO[i]) {\n                            readGas[j] = msg.payload[i].gas_energy_used;\n                            break;\n                        }else{\n                            readGas[j] = \"0.0\";\n                        }\n            }\n        }\n}\n\nfor (let k = 0; k < msg.payload.length; k++) {\n    sumGasTab[k] = Number(msg.payload[k].gas_energy_used);\n    sumGas += sumGasTab[k];\n}\n\nsumGas = parseFloat(sumGas).toFixed(1);\nflow.set('total_gas', sumGas);\n\nvar send_date = {\n            \"series\": [\"GAS ENERGY USED\"],\n            \"data\": [readGas],\n            \"labels\": dateArray\n        };\n\n\nreturn {payload:[send_date]};\n//////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////\n    \n  \n\n\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 340,
        "wires": [
            [
                "8f2ca312d2a83de8",
                "e2e5cfdbb8729cd1"
            ]
        ]
    },
    {
        "id": "4b1aa3267788f576",
        "type": "moment",
        "z": "ec66c396c4b33841",
        "name": "convert date/time",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "0",
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 410,
        "y": 220,
        "wires": [
            [
                "eaedd7e889c65e8e"
            ]
        ]
    },
    {
        "id": "2bad9f11ba09ba46",
        "type": "moment",
        "z": "ec66c396c4b33841",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "23",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 380,
        "y": 280,
        "wires": [
            [
                "6fcc4b59efedbfd1"
            ]
        ]
    },
    {
        "id": "6fcc4b59efedbfd1",
        "type": "moment",
        "z": "ec66c396c4b33841",
        "name": "add minutes",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "59",
        "adjType": "minutes",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 570,
        "y": 280,
        "wires": [
            [
                "88cfe781e62c667c"
            ]
        ]
    },
    {
        "id": "88cfe781e62c667c",
        "type": "moment",
        "z": "ec66c396c4b33841",
        "name": "add seconds",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "59",
        "adjType": "seconds",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 770,
        "y": 280,
        "wires": [
            [
                "585780eaa637d1d2"
            ]
        ]
    },
    {
        "id": "802a8b344ecc9122",
        "type": "mongodb4",
        "z": "ec66c396c4b33841",
        "clientNode": "41412466491ec58e",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "name": "",
        "x": 630,
        "y": 340,
        "wires": [
            [
                "ae133b77072cc05e"
            ]
        ]
    },
    {
        "id": "14df02cad8e651a9",
        "type": "inject",
        "z": "ec66c396c4b33841",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "38127fe1dd0b9d6f"
            ]
        ]
    },
    {
        "id": "38127fe1dd0b9d6f",
        "type": "change",
        "z": "ec66c396c4b33841",
        "name": "read from context file",
        "rules": [
            {
                "t": "move",
                "p": "#:(file)::gas_energy_price_cx",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "69a9c06c869175c4"
            ]
        ]
    },
    {
        "id": "8a1939f20a2e7331",
        "type": "change",
        "z": "ec66c396c4b33841",
        "name": "write to context file",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "#:(file)::gas_energy_price_cx",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f36921f96be6b02c",
        "type": "ui_button",
        "z": "754c6418534b1498",
        "name": "send date",
        "group": "a814efe498a94086",
        "order": 8,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "CONFIRM",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "dfa3c4482aa9011f"
            ]
        ]
    },
    {
        "id": "0bc028dafad4a093",
        "type": "ui_date_picker",
        "z": "754c6418534b1498",
        "name": "date from",
        "label": "From",
        "group": "a814efe498a94086",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "b286577fd1fd5c74",
                "678bf251d1b938ed"
            ]
        ]
    },
    {
        "id": "dd3c1aa51456d515",
        "type": "ui_date_picker",
        "z": "754c6418534b1498",
        "name": "date to",
        "label": "To",
        "group": "a814efe498a94086",
        "order": 6,
        "width": "7",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "ba51434ffa0cb266",
                "af8ea7f01eeb594c"
            ]
        ]
    },
    {
        "id": "5525629e1b070210",
        "type": "ui_dropdown",
        "z": "754c6418534b1498",
        "name": "select_shifts",
        "label": "",
        "tooltip": "",
        "place": "Select shifts",
        "group": "a814efe498a94086",
        "order": 2,
        "width": "9",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "1 Shift",
                "value": "shift_1",
                "type": "str"
            },
            {
                "label": "2 Shift",
                "value": "shift_2",
                "type": "str"
            },
            {
                "label": "1+2 Shift",
                "value": "shift_1_2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "91342894d1860e0a"
            ]
        ]
    },
    {
        "id": "1b461693ba75ef46",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "chart - select date from/electrical energy",
        "func": "flow.set('chart_date_from', msg.payload);\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": []
    },
    {
        "id": "15bd496c18aee7cf",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "chart - select date to/electrical energy",
        "func": "flow.set('chart_date_to', msg.payload);\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "91342894d1860e0a",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "chart - select_shifts",
        "func": "flow.set('chart_select_shifts', msg.payload);\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": []
    },
    {
        "id": "a3ac53353e436b05",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "4019840fb4425a21",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "5ee0f5adb91b3b00",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for work time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            enabled_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            enabled_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            enabled_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 500,
        "wires": [
            [
                "bf4c7dee99a2bc3a"
            ]
        ]
    },
    {
        "id": "930b50f3ed4d5091",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 540,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "ba51434ffa0cb266",
        "type": "moment",
        "z": "754c6418534b1498",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "23",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "15bd496c18aee7cf"
            ]
        ]
    },
    {
        "id": "b286577fd1fd5c74",
        "type": "moment",
        "z": "754c6418534b1498",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "7",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "1b461693ba75ef46"
            ]
        ]
    },
    {
        "id": "678bf251d1b938ed",
        "type": "moment",
        "z": "754c6418534b1498",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "5",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "c600f26b374e0b8b"
            ]
        ]
    },
    {
        "id": "c600f26b374e0b8b",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "chart - select date from/work time",
        "func": "flow.set('chart_date_work_time_from', msg.payload);\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 320,
        "wires": []
    },
    {
        "id": "d79176d1d25d5377",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "chart - select date to/work time",
        "func": "flow.set('chart_date_work_time_to', msg.payload);\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 380,
        "wires": []
    },
    {
        "id": "af8ea7f01eeb594c",
        "type": "moment",
        "z": "754c6418534b1498",
        "name": "add hours",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Warsaw",
        "adjAmount": "23",
        "adjType": "hours",
        "adjDir": "add",
        "format": "",
        "locale": "pl-PL",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Europe/Warsaw",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "d79176d1d25d5377"
            ]
        ]
    },
    {
        "id": "d87dc956c6715338",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 500,
        "wires": [
            [
                "a3ac53353e436b05",
                "930b50f3ed4d5091"
            ]
        ]
    },
    {
        "id": "bf6ea0cd671c9f54",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "4019840fb4425a21",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 540,
        "wires": [
            [
                "9f0be81ee4bcbc6d"
            ]
        ]
    },
    {
        "id": "c1079f1841ab8541",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 540,
        "wires": [
            [
                "bf6ea0cd671c9f54"
            ]
        ]
    },
    {
        "id": "16db5617b7e5c005",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "36a069683a8938df",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "9d711a6549ee34f6",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 660,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "0c686d72312b280e",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 620,
        "wires": [
            [
                "16db5617b7e5c005",
                "9d711a6549ee34f6"
            ]
        ]
    },
    {
        "id": "d60fa3ba2e1afc8c",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "36a069683a8938df",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 660,
        "wires": [
            [
                "b1f0896e12be2749"
            ]
        ]
    },
    {
        "id": "677465a5ceecb14f",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "dcaeca70c88b5fe1",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "7cf78e086ba33ac2",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 780,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "e0c6b6d176631086",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 740,
        "wires": [
            [
                "677465a5ceecb14f",
                "7cf78e086ba33ac2"
            ]
        ]
    },
    {
        "id": "0ba995c441ca8ac0",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "dcaeca70c88b5fe1",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 780,
        "wires": [
            [
                "6d8203a2110931fc"
            ]
        ]
    },
    {
        "id": "f790c429125b752f",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "994bcd932d808957",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "c542a50dfc250ee9",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 900,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "367556ccb9e528e1",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 860,
        "wires": [
            [
                "f790c429125b752f",
                "c542a50dfc250ee9"
            ]
        ]
    },
    {
        "id": "3c64fae6ace6bd9e",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "994bcd932d808957",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 900,
        "wires": [
            [
                "828b53a5c2886e62"
            ]
        ]
    },
    {
        "id": "4ca9df7cd5658bde",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "79c0e754f5264b6e",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "d5037afb86ddb37b",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1020,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "1337cb1215f94fe5",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 980,
        "wires": [
            [
                "4ca9df7cd5658bde",
                "d5037afb86ddb37b"
            ]
        ]
    },
    {
        "id": "496f542df6787a9f",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "79c0e754f5264b6e",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 1020,
        "wires": [
            [
                "201ae7feb35746cb"
            ]
        ]
    },
    {
        "id": "29d5ccab16b62633",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "02e36f0bf85e2720",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "89329c7c5dfaeaa0",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1140,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "c2e1bfb19eda24e1",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1100,
        "wires": [
            [
                "29d5ccab16b62633",
                "89329c7c5dfaeaa0"
            ]
        ]
    },
    {
        "id": "d8199d83572cf67c",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "02e36f0bf85e2720",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 1140,
        "wires": [
            [
                "c74e397339e97a1b"
            ]
        ]
    },
    {
        "id": "1b49f041e62245ca",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "b100aa642e832464",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "161cadba9a2b5a03",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1260,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "4b7e992290597b3e",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1220,
        "wires": [
            [
                "1b49f041e62245ca",
                "161cadba9a2b5a03"
            ]
        ]
    },
    {
        "id": "447b5359990666d7",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "b100aa642e832464",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 1260,
        "wires": [
            [
                "6db41399ab267e19"
            ]
        ]
    },
    {
        "id": "9f0d41372e330abf",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "productivity",
        "group": "69f1c5c452326bcd",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "PRODUCTIVITY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "cf3d3cb1384fc49e",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "aggregate data for job time",
        "func": "let select_machine = flow.get('chart_select_machine') || 0;\nlet date_from = flow.get('chart_date_work_time_from') || 0;\nlet date_to = flow.get('chart_date_work_time_to') || 0;\n\n    msg.collection = select_machine;\n    msg.operation = \"aggregate\";\n    \n    msg.payload = [[\n                    {\n                        $match: {\n                            job_start_date: {\n                                $gte: date_from\n                            }\n                        }\n                    },\n                    {\n                        $match: {\n                            job_stop_date: {\n                                $lte: date_to\n                            }\n                        }\n                    },\n                    {\n                        $sort: {\n                            job_stop_date: 1\n                        }\n                    } \n                    ]];\n\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1380,
        "wires": [
            [
                "2e50d5c23ff54646"
            ]
        ]
    },
    {
        "id": "ece038884381dfbd",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - productivity",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumEnabled = 0;\n//let sumEnabled_1_shift = 0;\n//let sumEnabled_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nlet const_EnableTime = 28800;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].enabled_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].enabled_start_date > concat_date_from && msg.payload[i].enabled_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].enabled_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_1_shift[k]\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled += readEnabledTime_2_shift[k]\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/const_EnableTime)*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumEnabled_1_shift += readEnabledTime_1_shift[k]\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/const_EnableTime)*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumEnabled_2_shift += readEnabledTime_2_shift[k]\n                }\n            //sumEnabled = sumEnabled_1_shift + sumEnabled_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\nflow.set('total_enabled_1_shift', readEnabledTime_1_shift);\nflow.set('total_enabled_2_shift', readEnabledTime_2_shift);\n//flow.set('total_enabled', sumEnabled);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1340,
        "wires": [
            [
                "9f0d41372e330abf",
                "cf3d3cb1384fc49e"
            ]
        ]
    },
    {
        "id": "ae0f3b0efaca67b0",
        "type": "ui_chart",
        "z": "754c6418534b1498",
        "name": "efficiency",
        "group": "69f1c5c452326bcd",
        "order": 12,
        "width": "15",
        "height": "10",
        "label": "EFFICIENCY",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#61bdff",
            "#ffae42",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2540,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "bf4c7dee99a2bc3a",
        "type": "mongodb4",
        "z": "754c6418534b1498",
        "clientNode": "41412466491ec58e",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "name": "",
        "x": 850,
        "y": 500,
        "wires": [
            [
                "305a24955d5e0cc2",
                "e3efdb5fa9dbb9db",
                "28610233d29c75ba",
                "e0229ea4aea490ea",
                "3f1a3bddb43032b3",
                "bcca5a0312cf374f",
                "88a2bbbe6685868a",
                "f79de8cd398edc8b"
            ]
        ]
    },
    {
        "id": "2e50d5c23ff54646",
        "type": "mongodb4",
        "z": "754c6418534b1498",
        "clientNode": "41412466491ec58e",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "name": "",
        "x": 1850,
        "y": 540,
        "wires": [
            [
                "edb942d735d98192",
                "67d8581ab53a47dd",
                "dcbaf40e445d7aa1",
                "f86f8e16ba5e6566",
                "da92f4b9cbe1e979",
                "2cca4ef94c86b431",
                "dfc8c3d4f2428bc5",
                "7fb17a5cd5b0fba0"
            ]
        ]
    },
    {
        "id": "dfa3c4482aa9011f",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID1');\nflow.set('data_write_selection', 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 500,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "305a24955d5e0cc2",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 1) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 500,
        "wires": [
            [
                "d87dc956c6715338"
            ]
        ]
    },
    {
        "id": "bf7ffb47e419d62c",
        "type": "inject",
        "z": "754c6418534b1498",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "2bb3719f629cca11"
            ]
        ]
    },
    {
        "id": "2bb3719f629cca11",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "state at first run",
        "func": "flow.set('data_write_selection', 0);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "e3efdb5fa9dbb9db",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 2) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 620,
        "wires": [
            [
                "0c686d72312b280e"
            ]
        ]
    },
    {
        "id": "28610233d29c75ba",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 3) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 740,
        "wires": [
            [
                "e0c6b6d176631086"
            ]
        ]
    },
    {
        "id": "e0229ea4aea490ea",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 4) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 860,
        "wires": [
            [
                "367556ccb9e528e1"
            ]
        ]
    },
    {
        "id": "3f1a3bddb43032b3",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 5) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 980,
        "wires": [
            [
                "1337cb1215f94fe5"
            ]
        ]
    },
    {
        "id": "bcca5a0312cf374f",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 6) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1100,
        "wires": [
            [
                "c2e1bfb19eda24e1"
            ]
        ]
    },
    {
        "id": "88a2bbbe6685868a",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 7) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1220,
        "wires": [
            [
                "4b7e992290597b3e"
            ]
        ]
    },
    {
        "id": "f79de8cd398edc8b",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 8) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1340,
        "wires": [
            [
                "ece038884381dfbd"
            ]
        ]
    },
    {
        "id": "9f0be81ee4bcbc6d",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID2');\nflow.set('data_write_selection', 2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 540,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "b1f0896e12be2749",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID3');\nflow.set('data_write_selection', 3);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 660,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "6d8203a2110931fc",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID4');\nflow.set('data_write_selection', 4);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 780,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "828b53a5c2886e62",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID5');\nflow.set('data_write_selection', 5);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 900,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "201ae7feb35746cb",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID6');\nflow.set('data_write_selection', 6);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 1020,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "c74e397339e97a1b",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID7');\nflow.set('data_write_selection', 7);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 1140,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "6db41399ab267e19",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "",
        "func": "flow.set('chart_select_machine', 'Machine_ID8');\nflow.set('data_write_selection', 8);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 1260,
        "wires": [
            [
                "5ee0f5adb91b3b00"
            ]
        ]
    },
    {
        "id": "edb942d735d98192",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 1) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 540,
        "wires": [
            [
                "c1079f1841ab8541"
            ]
        ]
    },
    {
        "id": "67d8581ab53a47dd",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 2) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 660,
        "wires": [
            [
                "1fc1fbd6097c54f8"
            ]
        ]
    },
    {
        "id": "dcbaf40e445d7aa1",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 3) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 780,
        "wires": [
            [
                "c6d927a34892085e"
            ]
        ]
    },
    {
        "id": "f86f8e16ba5e6566",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 4) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 900,
        "wires": [
            [
                "1253dc3a866e4cce"
            ]
        ]
    },
    {
        "id": "da92f4b9cbe1e979",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 5) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1020,
        "wires": [
            [
                "39f5187d68c060bb"
            ]
        ]
    },
    {
        "id": "2cca4ef94c86b431",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 6) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1140,
        "wires": [
            [
                "0fa5ea2d1241df83"
            ]
        ]
    },
    {
        "id": "dfc8c3d4f2428bc5",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 7) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1260,
        "wires": [
            [
                "db31c9f1f03778f4"
            ]
        ]
    },
    {
        "id": "7fb17a5cd5b0fba0",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "condition",
        "func": "let write_selection = flow.get('data_write_selection') || 0;\n\nif (write_selection == 8) {\nreturn msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1380,
        "wires": [
            [
                "c5c99ea001f9af15"
            ]
        ]
    },
    {
        "id": "1fc1fbd6097c54f8",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 660,
        "wires": [
            [
                "d60fa3ba2e1afc8c"
            ]
        ]
    },
    {
        "id": "c6d927a34892085e",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 780,
        "wires": [
            [
                "0ba995c441ca8ac0"
            ]
        ]
    },
    {
        "id": "1253dc3a866e4cce",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 900,
        "wires": [
            [
                "3c64fae6ace6bd9e"
            ]
        ]
    },
    {
        "id": "39f5187d68c060bb",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1020,
        "wires": [
            [
                "496f542df6787a9f"
            ]
        ]
    },
    {
        "id": "0fa5ea2d1241df83",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1140,
        "wires": [
            [
                "d8199d83572cf67c"
            ]
        ]
    },
    {
        "id": "db31c9f1f03778f4",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1260,
        "wires": [
            [
                "447b5359990666d7"
            ]
        ]
    },
    {
        "id": "c5c99ea001f9af15",
        "type": "function",
        "z": "754c6418534b1498",
        "name": "dictionary of dates - efficiency",
        "func": "let date_from = flow.get('chart_date_from') || 0;\nlet date_to = flow.get('chart_date_to') || 0;\nlet select_shifts = flow.get('chart_select_shifts') || 0;\nlet total_1_shift = flow.get('total_enabled_1_shift') || 0;\nlet total_2_shift = flow.get('total_enabled_2_shift') || 0;\n\nlet actualDate = [];\nlet actualDateToISO = [];\nlet readEnabledTime_1_shift = [];\nlet readEnabledTime_2_shift = [];\n\nlet productivity_1_shift = [];\nlet productivity_2_shift  = [];\n\nlet convert_date_from = new Date(date_from);\nlet convert_date_fromISO = convert_date_from.toISOString().substring(0, 10);\n\nlet convert_date_to = new Date(date_to);\nlet convert_date_toISO = convert_date_to.toISOString().substring(0, 10);\n\n//let sumJob = 0;\n//let sumJob_1_shift = 0;\n//let sumJob_2_shift = 0;\n\nlet dateArray;\n\nvar send_date;\n\nfunction convertDurationtoSeconds(duration){\n    const [hours, minutes, seconds] = duration.split(':');\n    return Number(hours) * 60 * 60 + Number(minutes) * 60 + Number(seconds);\n    }\n\nfunction getDates(startDate, endDate) {\n  const days = [],  \n        months = new Set(),\n        years = new Set()\n\n  const dateMove = new Date(startDate)\n  let date = startDate\n\n  while (date < endDate){\n    date = dateMove.toISOString().slice(0,10)\n    months.add(date.slice(0, 7))\n    years.add(date.slice(0, 4))\n    days.push(date)\n    dateMove.setDate(dateMove.getDate()+1) // increment day\n  }\n  return days // return arrays\n}\n\nfunction getEnabledTime_data(arrayLenght, getStartHour, getStopHour) {\n    const readEnableTime = new Array(arrayLenght);\n    readEnableTime.fill(0, 0);\n    let sumEnableTimeTab = [0];\n    for (let j = 0; j < arrayLenght; j++) {\n        for (let i = 0; i < msg.payload.length; i++) {\n            actualDate[i] = new Date(msg.payload[i].job_stop_date);\n            actualDateToISO[i] = actualDate[i].toISOString().slice(0, 10);\n                if (dateArray[j] == actualDateToISO[i]) {\n                    let concat_date_from = dateArray[j].concat(getStartHour);\n                    let concat_date_to = dateArray[j].concat(getStopHour);\n                       if (msg.payload[i].job_start_date > concat_date_from && msg.payload[i].job_stop_date < concat_date_to){\n                                \n                                sumEnableTimeTab[i] = convertDurationtoSeconds(msg.payload[i].job_time)\n                                readEnableTime[j] += sumEnableTimeTab[i];\n                            \n                       }\n                }else{\n                           readEnableTime[j] += 0;\n                       }\n        }\n    }\n        return readEnableTime;\n}\n\nif (convert_date_fromISO == convert_date_toISO) {\n    dateArray = [convert_date_fromISO];\n    if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(1, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(1, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift; \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}else{\n    dateArray = getDates(convert_date_fromISO, convert_date_toISO);\n        if (select_shifts == \"shift_1\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_1_shift[k];\n                }\n            send_date = {\n            \"series\": [\"1 SHIFT\"],\n            \"data\": [productivity_1_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_2\") {\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob += readEnabledTime_2_shift[k];\n                }\n            send_date = {\n            \"series\": [\"2 SHIFT\"],\n            \"data\": [productivity_2_shift],\n            \"labels\": dateArray\n            };\n        }else if (select_shifts == \"shift_1_2\") {\n            readEnabledTime_1_shift = getEnabledTime_data(dateArray.length, \"T05:00:00.000Z\", \"T13:59:59.000Z\");\n            readEnabledTime_2_shift = getEnabledTime_data(dateArray.length, \"T14:00:00.000Z\", \"T23:00:00.000Z\");\n                for (let k = 0; k < readEnabledTime_1_shift.length; k++) {\n                    if (total_1_shift[k] == 0) {\n                        if (readEnabledTime_1_shift[k] == 0) {\n                            total_1_shift[k] = 1;\n                        }else{\n                            total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                        }\n                    }else if (total_1_shift[k] > 0 && total_1_shift[k] < readEnabledTime_1_shift[k]) {\n                        total_1_shift[k] = readEnabledTime_1_shift[k]*100;\n                    }else{\n                        total_1_shift[k] = total_1_shift[k];\n                    }\n                    productivity_1_shift[k] = (readEnabledTime_1_shift[k]/total_1_shift[k])*100;\n                    productivity_1_shift[k] = parseFloat(productivity_1_shift[k]).toFixed(1);\n                    //sumJob_1_shift += readEnabledTime_1_shift[k];\n                }\n                for (let k = 0; k < readEnabledTime_2_shift.length; k++) {\n                    if (total_2_shift[k] == 0) {\n                        if (readEnabledTime_2_shift[k] == 0) {\n                            total_2_shift[k] = 1;\n                        }else{\n                            total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                        }\n                    }else if (total_2_shift[k] > 0 && total_2_shift[k] < readEnabledTime_2_shift[k]) {\n                        total_2_shift[k] = readEnabledTime_2_shift[k]*100;\n                    }else{\n                        total_2_shift[k] = total_2_shift[k];\n                    }\n                    productivity_2_shift[k] = (readEnabledTime_2_shift[k]/total_2_shift[k])*100;\n                    productivity_2_shift[k] = parseFloat(productivity_2_shift[k]).toFixed(1);\n                    //sumJob_2_shift += readEnabledTime_2_shift[k];\n                }\n            //sumJob = sumJob_1_shift + sumJob_2_shift;  \n            send_date = {\n            \"series\": [\"1 SHIFT\", \"2 SHIFT\"],\n            \"data\": [productivity_1_shift, productivity_2_shift],\n            \"labels\": dateArray\n            };\n        } \n}\n\n//flow.set('total_job', sumJob);\n\nreturn {payload:[send_date]};\n\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1380,
        "wires": [
            [
                "ae0f3b0efaca67b0"
            ]
        ]
    }
]
